// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Password = (function() {
    function Password(element, options) {
      var generation, panel,
        _this = this;
      if (options == null) {
        options = new Object;
      }
      this.__random = __bind(this.__random, this);
      this.__buildDialog = __bind(this.__buildDialog, this);
      this.__suggest = __bind(this.__suggest, this);
      this.element = element;
      this.options = options;
      panel = $('<div class="password-panel"></div>');
      generation = $('<div class="password-generation"></div>');
      this.dialog = this.__buildDialog().hide();
      element.after(panel);
      element.appendTo(panel);
      element.after(generation);
      panel.append(this.dialog);
      element.width(element.width() - 14);
      panel.css({
        width: element.width() + 'px'
      });
      generation.bind('click', function(event) {
        return _this.__suggest(event);
      });
    }

    Password.prototype.__suggest = function(event) {
      var input, offset, pos, val,
        _this = this;
      if (this.dialog.is(':visible')) {
        return;
      }
      pos = $(event.target).position();
      offset = $(event.target).offset();
      if (document.body.clientHeight - offset.top < 100) {
        pos.top -= 20;
      }
      if (offset.top < 30) {
        pos.top = 20;
      }
      this.dialog.css({
        top: pos.top - 10 + 'px',
        left: pos.left + 30 + 'px'
      });
      this.dialog.show();
      val = this.dialog.data('current');
      if (val == null) {
        val = this.__random();
      }
      input = this.dialog.find('input');
      input.val(val);
      input.select();
      return setTimeout(function() {
        return $(window).bind('click.password', function(event) {
          if (!$(event.target).parents('.password-dialog').length) {
            _this.dialog.hide();
            return $(window).unbind('click.password');
          }
        });
      }, 1);
    };

    Password.prototype.__buildDialog = function() {
      var dialog, input, ok, reset,
        _this = this;
      dialog = $('<div class="password-dialog"></div>');
      dialog.append('<div class="password-arrow"></div>');
      dialog.append('<p>密码建议</p>');
      input = $('<input type="text" />').appendTo(dialog);
      reset = $('<span class="password-turn"></span>').appendTo(dialog);
      ok = $('<a href="javascript:;">确认</a>').appendTo(dialog);
      reset.bind('click', function() {
        input.val(_this.__random());
        return setTimeout(function() {
          return input.select();
        }, 1);
      });
      ok.bind('click', function() {
        var val;
        val = _this.dialog.find('input').val();
        _this.dialog.data('current', val);
        _this.dialog.hide();
        _this.element.val(val);
        if (typeof _this.options.callback === 'function') {
          _this.options.callback();
        }
        return $(window).unbind('click.password');
      });
      input.bind('keydown', function(event) {
        if (event.keyCode === 9) {
          return false;
        }
      });
      return dialog;
    };

    Password.prototype.__random = function() {
      var alphabet, alphabetLength, i, length, seed, string, _base, _base1, _i;
      string = '';
      if ((_base = this.options).minLength == null) {
        _base.minLength = 12;
      }
      if ((_base1 = this.options).maxLength == null) {
        _base1.maxLength = 16;
      }
      seed = (new Date).getTime();
      length = (Math.random(seed) * (this.options.maxLength + 1 - this.options.minLength) >>> 0) + this.options.minLength;
      alphabet = 'abcdefghijklmnopqrstuvwxyz';
      alphabet += 'ABCDEFGHIJKLMNOPQURSTUVWXYZ';
      alphabet += '0123456789';
      if (!this.options.disableSpecial) {
        alphabet += '+:;\'<>[]{}()"~/!@#$%^&*';
      }
      alphabetLength = alphabet.length;
      for (i = _i = 1; 1 <= length ? _i <= length : _i >= length; i = 1 <= length ? ++_i : --_i) {
        string += alphabet[(Math.random(seed) * alphabetLength) >>> 0];
      }
      return string;
    };

    return Password;

  })();

}).call(this);
